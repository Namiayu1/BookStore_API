{
	"info": {
		"_postman_id": "f5cca8fd-c932-4dd2-89f2-0132606e1655",
		"name": "Book Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27120578",
		"_collection_link": "https://blue-equinox-730950.postman.co/workspace/Reqres~31cbac33-5771-4b8f-bf88-dab9a19f1daf/collection/27120578-f5cca8fd-c932-4dd2-89f2-0132606e1655?action=share&source=collection_link&creator=27120578"
	},
	"item": [
		{
			"name": "Account/v1/User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//userID\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var userID = responseJson.userID;\r",
							"pm.environment.set(\"userID\", userID);\r",
							"\r",
							"//userName\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var username = responseJson.username;\r",
							"pm.environment.set(\"username\", username);\r",
							"\r",
							"// //password\r",
							"// var responseJson = pm.response.json();\r",
							"\r",
							"// var password = responseJson.password;\r",
							"// pm.environment.set(\"password\", password);\r",
							"\r",
							"//status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//code string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"username\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"books\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"isbn\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"title\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"subTitle\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"author\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publish_date\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publisher\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"pages\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"description\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"website\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"isbn\",\r",
							"            \"title\",\r",
							"            \"subTitle\",\r",
							"            \"author\",\r",
							"            \"publish_date\",\r",
							"            \"publisher\",\r",
							"            \"pages\",\r",
							"            \"description\",\r",
							"            \"website\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userId\",\r",
							"    \"username\",\r",
							"    \"books\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{$randomUserName}}\",\r\n  \"password\": \"Abc123$_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/User",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "Account/v1/GenerateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//token\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var token = responseJson.token;\r",
							"pm.environment.set(\"token\", token);\r",
							"\r",
							"//status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//status string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"token\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"expires\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"result\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"token\",\r",
							"    \"expires\",\r",
							"    \"status\",\r",
							"    \"result\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{username}}\",\r\n  \"password\": \"Abc123$_\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/GenerateToken",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Account/v1/User/{UUID}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//status string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"username\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"books\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"isbn\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"title\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"subTitle\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"author\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publish_date\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publisher\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"pages\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"description\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"website\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"isbn\",\r",
							"            \"title\",\r",
							"            \"subTitle\",\r",
							"            \"author\",\r",
							"            \"publish_date\",\r",
							"            \"publisher\",\r",
							"            \"pages\",\r",
							"            \"description\",\r",
							"            \"website\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userId\",\r",
							"    \"username\",\r",
							"    \"books\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response structure data is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/Account/v1/User/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "BookStore/v1/Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//ngambil isbn\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"var ISBN = responseJson.books[1].isbn;\r",
							"pm.environment.set(\"ISBN\", ISBN);\r",
							"\r",
							"//status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//status string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"books\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"isbn\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"title\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"subTitle\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"author\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publish_date\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publisher\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"pages\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"description\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"website\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"isbn\",\r",
							"            \"title\",\r",
							"            \"subTitle\",\r",
							"            \"author\",\r",
							"            \"publish_date\",\r",
							"            \"publisher\",\r",
							"            \"pages\",\r",
							"            \"description\",\r",
							"            \"website\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"books\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "BookStore/v1/Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//status string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000msms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"isbn\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"isbn\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{ISBN}}\"\r\n    }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "BookStore/v1/Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//status string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"isbn\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"subTitle\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"author\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"publish_date\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"publisher\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"pages\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"website\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"isbn\",\r",
							"    \"title\",\r",
							"    \"subTitle\",\r",
							"    \"author\",\r",
							"    \"publish_date\",\r",
							"    \"publisher\",\r",
							"    \"pages\",\r",
							"    \"description\",\r",
							"    \"website\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response Data Structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Book?ISBN={{ISBN}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					],
					"query": [
						{
							"key": "ISBN",
							"value": "{{ISBN}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BookStore/v1/Books {ISBN}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//statuc code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//status string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000msms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"username\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"books\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"isbn\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"title\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"subTitle\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"author\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publish_date\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"publisher\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"pages\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"description\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"website\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"isbn\",\r",
							"            \"title\",\r",
							"            \"subTitle\",\r",
							"            \"author\",\r",
							"            \"publish_date\",\r",
							"            \"publisher\",\r",
							"            \"pages\",\r",
							"            \"description\",\r",
							"            \"website\"\r",
							"          ]\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userId\",\r",
							"    \"username\",\r",
							"    \"books\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response structure data is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"isbn\": \"9781449325862\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Books/{{ISBN}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books",
						"{{ISBN}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "BookStore/v1/Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"//status string\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Success\");\r",
							"});\r",
							"\r",
							"//response time\r",
							"pm.test(\"Response time is less than 1000msms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//schema\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"userId\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"isbn\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"userId\",\r",
							"    \"isbn\",\r",
							"    \"message\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"isbn\": \"9781449325862\",\r\n  \"userId\": \"{{userID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Book",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					]
				}
			},
			"response": []
		}
	]
}